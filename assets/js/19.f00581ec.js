(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{316:function(t,v,_){"use strict";_.r(v);var e=_(38),a=Object(e.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"node"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node","aria-hidden":"true"}},[t._v("#")]),t._v(" Node")]),t._v(" "),_("h2",{attrs:{id:"koa-的中间件思想"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#koa-的中间件思想","aria-hidden":"true"}},[t._v("#")]),t._v(" Koa 的中间件思想")]),t._v(" "),_("blockquote",[_("p",[t._v("koa 最大的特色，就是中间件的设计")])]),t._v(" "),_("p",[t._v("koa app 是一个包含一组中间件函数的对象，它是按照类似堆栈的方式组织和执行的")]),t._v(" "),_("p",[t._v("中间件可以简单看作是一个函数对象，被用在两个执行步骤之间，达到某种中间功能")]),t._v(" "),_("p",[t._v("中间件默认接受两个参数：Context对象，next函数，只要调用 "),_("code",[t._v("next()")]),t._v(" 就表示将执行权"),_("strong",[t._v("暂时")]),t._v("传递给下一个middleware")]),t._v(" "),_("p",[t._v("中间件更多的使用方式是"),_("strong",[t._v("级连")]),t._v("，即中间件栈，当在下游没有更多的中间件执行后，堆栈将展开并且每个中间件恢复执行其上游行为，类似"),_("strong",[t._v("先进后出")]),t._v("的处理机制")]),t._v(" "),_("ol",[_("li",[t._v("最外层中间件首先执行")]),t._v(" "),_("li",[t._v("调用 next 函数，将执行权暂时交给下一个中间件")]),t._v(" "),_("li",[t._v("...")]),t._v(" "),_("li",[t._v("最内层的中间件开始执行，其下游没有更多的中间件")]),t._v(" "),_("li",[t._v("执行结束后，将执行权交回给上一层中间件")]),t._v(" "),_("li",[t._v("...")]),t._v(" "),_("li",[t._v("最外层的中间件回收到执行权之后，执行 next 之后的方法")])])])},[],!1,null,null,null);v.default=a.exports}}]);