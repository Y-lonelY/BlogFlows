(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{284:function(s,t,a){"use strict";a.r(t);var e=a(38),n=Object(e.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"advanced"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced","aria-hidden":"true"}},[s._v("#")]),s._v(" Advanced")]),s._v(" "),a("blockquote",[a("p",[s._v("Advanced Features")])]),s._v(" "),a("h2",{attrs:{id:"面向对象编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象编程","aria-hidden":"true"}},[s._v("#")]),s._v(" 面向对象编程")]),s._v(" "),a("p",[s._v("面向对象中需要重点理解两个东西：类（class）和实例（instance）")]),s._v(" "),a("p",[s._v("就比如：人是一个class，人具有年龄，爱好等属性，同时人可以制造工具或者进行其他活动，这可以视为人的属性和方法，而地球上的每一个人就是人这个类的 instance")]),s._v(" "),a("p",[s._v("类是抽象的模版，实例是类的具体表现")]),s._v(" "),a("p",[s._v("面向对象的"),a("strong",[s._v("核心思想")]),s._v("是抽象出 class，再利用 class 创建出 instance")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/env python3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -*- coding: utf-8 -*-")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'wakatime scripts'")]),s._v("\n\n__author__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Y-lonelY'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" json\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" requests\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 普通成员变量")]),s._v("\n\turl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'https://wakatime.com/api/v1/users/current/summaries'")]),s._v("\n    cache "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 私有成员变量")]),s._v("\n    __api_key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xxx'")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" start\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" end\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("except")]),s._v(" Exception "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过 classmethod 来声明静态方法，通过 cls 来取代 self")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@classmethod")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_lang_sql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# statement")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\tperson "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2019-10-10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2019-10-20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tperson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])]),a("h3",{attrs:{id:"访问限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问限制","aria-hidden":"true"}},[s._v("#")]),s._v(" 访问限制")]),s._v(" "),a("p",[s._v("限制访问的目的在于不让类外部方法随意更改类的内部属性，保护内部状态")]),s._v(" "),a("p",[s._v("类比私有属性的概念，关键字为 "),a("code",[s._v("__")]),s._v("，比如 "),a("code",[s._v("self.__name")]),s._v("，这样实例对象就不能访问到 "),a("code",[s._v("__name")]),s._v(" 这个属性，这个属性仅在类的内部使用")]),s._v(" "),a("p",[s._v("可以通过内部定义的 "),a("code",[s._v("get || set")]),s._v(" 方法，将私有变量返回或者修改")]),s._v(" "),a("p",[s._v("写法比较")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("_name")]),s._v(" 这种写法，在类外部是可以访问的，但是它按照python习惯，表示“可以访问，但是不要随意改变”")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__name__")]),s._v(" 表示特殊变量，在类外部是可以访问的")])])]),s._v(" "),a("h3",{attrs:{id:"class-instance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-instance","aria-hidden":"true"}},[s._v("#")]),s._v(" class && instance")]),s._v(" "),a("p",[s._v("python 中的类通过 "),a("code",[s._v("class")]),s._v(" 关键字声明，类的完整声明 "),a("code",[s._v("class Person(object):")]),s._v(" 表示 person 这个类继承至 object，"),a("strong",[s._v("注意")]),s._v("，所有的类本质上都继承至 object")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("__init__(self, params)")]),s._v(" 来约定创建实例时，强制需要传入的参数，作用是将属性绑定到 "),a("code",[s._v("self")]),s._v(" 上，"),a("code",[s._v("__self__")]),s._v(" 就是实例本身，不用传入，且默认为第一个参数，可以类比 es6 的 "),a("code",[s._v("constructor()")]),s._v(" 方法")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("self")]),s._v(" 是给类的生成实例绑定属性，在类里面直接声明变量就是直接给类绑定属性，如果绑定了同名的属性，python3 会优先选择实例属性，所以一般不要声明同名属性")]),s._v(" "),a("p",[s._v("数据封装：因为实例在声明时就已经有了声明的数据，所以可以直接在类的内部去访问这些数据，而没必要去再在外部通过函数去访问（这意味着你需要维护实例初始化的数据，来随时作为参数传入函数）")]),s._v(" "),a("p",[a("strong",[s._v("注意")])]),s._v(" "),a("ol",[a("li",[s._v("class 的名字第一个字母约定为大写")]),s._v(" "),a("li",[s._v("类中定义方法的第一个参数必须是 "),a("code",[s._v("self")]),s._v("，可以类比 javascript 中的 "),a("code",[s._v("this")]),s._v(" 关键字，指向实例本身")]),s._v(" "),a("li",[s._v("与 javascript 不同之处之一在于：python 中创建一个实例不需要使用 "),a("code",[s._v("new")]),s._v(" 关键字")])]),s._v(" "),a("h2",{attrs:{id:"切片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片","aria-hidden":"true"}},[s._v("#")]),s._v(" 切片")]),s._v(" "),a("p",[s._v("切换用于取 list 或者 tuple 部分元素")]),s._v(" "),a("p",[s._v("切片操作符（slice）可以用于 str(str 也可以看成一个 list), list, tuple")]),s._v(" "),a("p",[s._v("截取出来的元素类型由原元素决定，这里需要注意例如 “params[-1:] 和 params[-1]” 的区别在于返回值类型不同")]),s._v(" "),a("p",[s._v("可以通过 "),a("code",[s._v("[:]")]),s._v(" 直接复制原list")]),s._v(" "),a("p",[a("code",[s._v("[n:m:i]")]),s._v(" 这样的写法表示从原 list 的 n-m 范围内，每隔 i 取一次值")]),s._v(" "),a("h2",{attrs:{id:"迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代","aria-hidden":"true"}},[s._v("#")]),s._v(" 迭代")]),s._v(" "),a("p",[s._v("python 中只要是可迭代的对象都可以通过 "),a("code",[s._v("for...in...")]),s._v(" 来遍历，比如字符串，list，dict")]),s._v(" "),a("p",[s._v("通过引入collections模块的Iterable类型判断对象是否可以迭代")]),s._v(" "),a("p",[s._v("通过内置方法 "),a("code",[s._v("enumerate(list)")]),s._v(" 可以把list转换成键值对的形式")]),s._v(" "),a("h2",{attrs:{id:"列表生成式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表生成式","aria-hidden":"true"}},[s._v("#")]),s._v(" 列表生成式")]),s._v(" "),a("p",[s._v("通过列表生成式，可以直接创建一个列表，但是由于内存限制，列表容量有限，对于仅用访问部分元素却要创建一个大数据量元素的列表，很容易会造成资源浪费")]),s._v(" "),a("p",[s._v("关键表达式："),a("code",[s._v("[表达式 for i in item 判断条件]")]),s._v(" 可以读作：for i in item，根据判断条件对 i 进行筛选，然后将 i 代入表达式得到计算结果，return 出最终结果，其中 for 循环可以存在多个(相当于嵌套循环)")]),s._v(" "),a("p",[s._v("列表生成式，所以其关键字为 "),a("code",[s._v("[...]")])]),s._v(" "),a("h2",{attrs:{id:"generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator","aria-hidden":"true"}},[s._v("#")]),s._v(" generator")]),s._v(" "),a("p",[s._v("生成器针对列表生成器的缺点，提出了一种更好的解决方案：generator 不必创建完整的 list，它的机制是一边循环一边计算，通过算法推算出下一个元素")]),s._v(" "),a("p",[s._v("生成器的关键字为 "),a("code",[s._v("(...)")]),s._v(" 或者 "),a("code",[s._v("yield")])]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("next(generator)")]),s._v(" 可以计算出生成器下一个元素值，直到计算到最后一个元素，抛出 "),a("code",[s._v("StopInteration")]),s._v(" 错误，不过 "),a("code",[s._v("next()")]),s._v(" 几乎不会用到")]),s._v(" "),a("p",[s._v("generator 是一个迭代器，所有通过可以通过迭代方法来遍历，而不需要关心 "),a("code",[s._v("StopInteration")]),s._v(" 错误")]),s._v(" "),a("p",[a("code",[s._v("yield")]),s._v(" 关键字用在函数方法中，表示该函数是一个生成器")]),s._v(" "),a("p",[s._v("包含 "),a("code",[s._v("yield")]),s._v(" 的 generator 与函数最大的区别在于执行机制")]),s._v(" "),a("ul",[a("li",[s._v("函数会按照顺序依次执行，直到 return 或者执行到最后一行语句返回，直接返回结果")]),s._v(" "),a("li",[s._v("generator 遇到 "),a("code",[s._v("yield")]),s._v(" 返回，遇到 "),a("code",[s._v("next()")]),s._v(" 语句继续执行，且从上次返回的 "),a("code",[s._v("yield")]),s._v(" 语句出开始，返回一个 generator")])]),s._v(" "),a("h2",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器","aria-hidden":"true"}},[s._v("#")]),s._v(" 迭代器")]),s._v(" "),a("p",[s._v("可迭代对象（Interable）和迭代器（Interator）:")]),s._v(" "),a("ul",[a("li",[s._v("可以直接迭代（for循环遍历）的对象就是可迭代对象")]),s._v(" "),a("li",[s._v("不但可以迭代，还可以被 "),a("code",[s._v("next()")]),s._v(" 函数调用的就是迭代器")]),s._v(" "),a("li",[s._v("Interator 一定是 Interable，反之却不一定成立")])]),s._v(" "),a("p",[s._v("生成器就是一个迭代器，迭代器的计算是惰性的，只有在需要时才会计算下一个数值，因此它可以用来表示一个无限大的数据流，只是不知道其长度")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("list()")]),s._v(" 来强制计算 Interator 并返回一个 list")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("iter()")]),s._v(" 来将 Interable 转换成一个 Interator")]),s._v(" "),a("p",[s._v("python3 的 for 循环本质上是通过 "),a("code",[s._v("iter()")]),s._v(" 函数结合 "),a("code",[s._v("next()")]),s._v(" 来实现的")]),s._v(" "),a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举","aria-hidden":"true"}},[s._v("#")]),s._v(" 枚举")]),s._v(" "),a("p",[s._v("枚举类是用来管理同类型不同值的常量的定义")]),s._v(" "),a("p",[s._v("Python 提供 "),a("code",[s._v("Enum")]),s._v(" 关键字来实现枚举类，通过枚举类型来定义一个 class 类型，这个 class 不可改变，每个常量都是这个 class 的唯一实例，实现方法很简单：")]),s._v(" "),a("div",{staticClass:"language-Python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" enum "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Enum\n\nMonth "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Month'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Feb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Mar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取枚举值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" menber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" Month"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__members__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# statements")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("枚举类的 "),a("code",[s._v("value")]),s._v(" 默认从 1 开始赋值给各个变量，如果想要自定义枚举类型的值，可以通过从 "),a("code",[s._v("Enum")]),s._v(" 派生出自定义类：")]),s._v(" "),a("div",{staticClass:"language-Python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" enum "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" unique\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# @unique 用来帮助检查是否有重复值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@unique")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Week")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\tSun "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\tMon "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("通过 "),a("code",[s._v("Week.Sun")]),s._v(" 和 "),a("code",[s._v("Week.Sun.value")]),s._v(" 来访问枚举常量和值")]),s._v(" "),a("h3",{attrs:{id:"枚举类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举类","aria-hidden":"true"}},[s._v("#")]),s._v(" 枚举类")]),s._v(" "),a("p",[s._v("枚举类的作用就是将一组相关常量定义在一个 class 中")]),s._v(" "),a("p",[s._v("枚举类的声明方法有两种：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("通过 "),a("code",[s._v("Enum(classname, tuple)")]),s._v(" 方法直接生成，相当于调用 "),a("code",[s._v("Enum")]),s._v(" 类的 "),a("code",[s._v("__call__()")]),s._v(" 定制方法，其 "),a("code",[s._v("value")]),s._v(" 从 1 开始累加")])]),s._v(" "),a("li",[a("p",[s._v("通过继承 "),a("code",[s._v("Enum")]),s._v(" 类来实现枚举类，此时可以利用装饰器 "),a("code",[s._v("unique")]),s._v(" 来保证没有重复值")])])]),s._v(" "),a("h2",{attrs:{id:"面向对象编程-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象编程-2","aria-hidden":"true"}},[s._v("#")]),s._v(" 面向对象编程")]),s._v(" "),a("p",[s._v("面向对象中需要重点理解两个东西：类（class）和实例（instance）")]),s._v(" "),a("p",[s._v("就比如：人是一个class，人具有年龄，爱好等属性，同时人可以制造工具或者进行其他活动，这可以视为人的属性和方法，而地球上的每一个人就是人这个类的 instance")]),s._v(" "),a("p",[s._v("类是抽象的模版，实例是类的具体表现")]),s._v(" "),a("p",[s._v("面向对象的"),a("strong",[s._v("核心思想")]),s._v("是抽象出 class，再利用 class 创建出 instance")]),s._v(" "),a("h3",{attrs:{id:"面向对象和面向过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程","aria-hidden":"true"}},[s._v("#")]),s._v(" 面向对象和面向过程")]),s._v(" "),a("p",[s._v("面向过程的程序设计是把计算机程序视为"),a("strong",[s._v("一系列的命令集合")]),s._v("，维护的是其执行顺序")]),s._v(" "),a("p",[s._v("面向对象的程序设计是把计算机程序视为"),a("strong",[s._v("一组对象的集合")]),s._v("，维护的是消息在对象之间的传递")]),s._v(" "),a("p",[s._v("面向对象的抽象程序要比函数高，因为一个class既包含数据，又包含操作数据的方法")]),s._v(" "),a("h3",{attrs:{id:"class-instance-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-instance-2","aria-hidden":"true"}},[s._v("#")]),s._v(" class && instance")]),s._v(" "),a("p",[s._v("python 中的类通过 "),a("code",[s._v("class")]),s._v(" 关键字声明，类的完整声明 "),a("code",[s._v("class Person(object):")]),s._v(" 表示 person 这个类继承至 object，"),a("strong",[s._v("注意")]),s._v("，所有的类本质上都继承至 object")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("__init__(self, params)")]),s._v(" 来约定创建实例时，强制需要传入的参数，作用是将属性绑定到 "),a("code",[s._v("self")]),s._v(" 上，"),a("code",[s._v("__self__")]),s._v(" 就是实例本身，不用传入，且默认为第一个参数，可以类比 es6 的 "),a("code",[s._v("constructor()")]),s._v(" 方法")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("self")]),s._v(" 是给类的生成实例绑定属性，在类里面直接声明变量就是直接给类绑定属性，如果绑定了同名的属性，python3 会优先选择实例属性，所以一般不要声明同名属性")]),s._v(" "),a("p",[s._v("数据封装：因为实例在声明时就已经有了声明的数据，所以可以直接在类的内部去访问这些数据，而没必要去再在外部通过函数去访问（这意味着你需要维护实例初始化的数据，来随时作为参数传入函数）")]),s._v(" "),a("p",[a("strong",[s._v("注意")])]),s._v(" "),a("ol",[a("li",[s._v("class 的名字第一个字母约定为大写")]),s._v(" "),a("li",[s._v("类中定义方法的第一个参数必须是 "),a("code",[s._v("self")]),s._v("，可以类比 javascript 中的 "),a("code",[s._v("this")]),s._v(" 关键字，指向实例本身")]),s._v(" "),a("li",[s._v("与 javascript 不同之处之一在于：python 中创建一个实例不需要使用 "),a("code",[s._v("new")]),s._v(" 关键字")])]),s._v(" "),a("h3",{attrs:{id:"访问限制-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问限制-2","aria-hidden":"true"}},[s._v("#")]),s._v(" 访问限制")]),s._v(" "),a("p",[s._v("限制访问的目的在于不让类外部方法随意更改类的内部属性，保护内部状态")]),s._v(" "),a("p",[s._v("类比私有属性的概念，关键字为 "),a("code",[s._v("__")]),s._v("，比如 "),a("code",[s._v("self.__name")]),s._v("，这样实例对象就不能访问到 "),a("code",[s._v("__name")]),s._v(" 这个属性，这个属性仅在类的内部使用")]),s._v(" "),a("p",[s._v("可以通过内部定义的 "),a("code",[s._v("get || set")]),s._v(" 方法，将私有变量返回或者修改")]),s._v(" "),a("p",[s._v("写法比较")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("_name")]),s._v(" 这种写法，在类外部是可以访问的，但是它按照python习惯，表示“可以访问，但是不要随意改变”")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__name__")]),s._v(" 表示特殊变量，在类外部是可以访问的")])])]),s._v(" "),a("h3",{attrs:{id:"继承和多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承和多态","aria-hidden":"true"}},[s._v("#")]),s._v(" 继承和多态")]),s._v(" "),a("p",[s._v("在面向对象中，一个类可以直接从另一个类中继承，形成子类与父类（或者说超类）的关系，子类会继承父类的所有属性和方法")]),s._v(" "),a("p",[s._v("子类可以重写父类方法，python 会优先执行子类方法")]),s._v(" "),a("p",[a("strong",[s._v("在 python 中创建一个类，实际上就是创建了一个数据结构")]),s._v("，可以通过 "),a("code",[s._v("isinstance(instance, class)")]),s._v(" 来判断")]),s._v(" "),a("p",[s._v("多态：因为类实际上定义了一种数据类型，所以我们可以在函数中将 instance 作为参数传入，从而可以直接调用父类的方法，而不必关心子类如何定义")]),s._v(" "),a("p",[s._v("“开闭原则”：")]),s._v(" "),a("ul",[a("li",[s._v("对扩展开放：允许新增子类")]),s._v(" "),a("li",[s._v("对修改封闭：不需要修改依赖父类实现的方法，子类即可调用")])]),s._v(" "),a("p",[s._v("作为动态语言 python 的特别之处，"),a("strong",[s._v("鸭子类型")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("在静态语言中，规定传参为 class，则必须为 class 或者其子类，否则报错")]),s._v(" "),a("li",[s._v("对于动态语言，只需要你传入的对象内也定义了某个方法，则可以执行完整的方法。即“看起来像鸭子，走起路来像鸭子，则它就是鸭子”")])]),s._v(" "),a("h3",{attrs:{id:"property"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#property","aria-hidden":"true"}},[s._v("#")]),s._v(" @property")]),s._v(" "),a("p",[a("code",[s._v("@property")]),s._v(" 可以理解为类的“装饰器”，它用于将一个"),a("strong",[s._v("方法变成属性")]),s._v("调用，这样做的目的是避免通过 "),a("code",[s._v("__init__()")]),s._v(" 方法定义的属性直接暴露出去，从而被任意修改，保证对参数进行必要的检查")]),s._v(" "),a("p",[a("code",[s._v("@property")]),s._v(" 通过对变量进行赋值操作，完成对方法的传参操作")]),s._v(" "),a("h3",{attrs:{id:"多重继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多重继承","aria-hidden":"true"}},[s._v("#")]),s._v(" 多重继承")]),s._v(" "),a("p",[s._v("在设计类的继承关系时，一般都是主线单一继承，但是如果需要混入额外的类的功能时，则需要用到多重继承，关键字是 "),a("code",[s._v("MixIn")])]),s._v(" "),a("p",[s._v("MixIn 的目的就是给一个类增加多个功能，这样可以避免设计出多层次的复杂继承关系，有效减少代码的复杂性和冗余")]),s._v(" "),a("p",[s._v("一般在以 "),a("code",[s._v("classnameMixIn")]),s._v(" 的形式来定义 MixIn 类")]),s._v(" "),a("h3",{attrs:{id:"定制类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定制类","aria-hidden":"true"}},[s._v("#")]),s._v(" 定制类")]),s._v(" "),a("p",[s._v("python3 中通过定义形如 "),a("code",[s._v("__xxx__")]),s._v(" 的方法来表示一组在 class 中有特殊用途的函数，用来帮我们定制类")]),s._v(" "),a("p",[s._v("实际表现就是，python3 定义了一批函数名，然后用户为其添加具体方法，最终在实例以某种形式就可以调用其函数方法，目的是为了让实例调用方法更加简单")]),s._v(" "),a("p",[s._v("如果没有定义这些特殊方法，python3 就会按照之前定义的执行")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("__str__()")]),s._v(" 在用户在调用 "),a("code",[s._v("print(Instance)")]),s._v(" 时执行此")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__repr__()")]),s._v(" 在直接打印 Instance 时调用，区别于 "),a("code",[s._v("__str__()")]),s._v(" 它是为调试服务")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__iter__()")]),s._v(" 方法返回一个迭代对象，使 Instance 能够作为迭代对象被 "),a("code",[s._v("for...in")]),s._v(" 循环，同时还需要定义一个 "),a("code",[s._v("__next__()")]),s._v(" 方法，使每次迭代时都调用此方法来返回下一个值，直到遇到 "),a("code",[s._v("StopInteration")]),s._v(" 错误时退出循环")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__getattr__()")]),s._v(" 方法用于实例调用属性或者方法时，如果原先没声明而直接使用就会调用该方法，利用 "),a("code",[s._v("__getattr__()")]),s._v(" 结合返回函数可以生成"),a("strong",[s._v("链式方法")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("__call__()")]),s._v(" 用来直接调用实例，就像调用函数一样，本质上函数和类是同类，可以通过 "),a("code",[s._v("callable()")]),s._v(" 方法来判断函数还是实例，因为如果一个对象能够被调用，那么它就是一个 "),a("strong",[s._v("Callable对象")])])])]),s._v(" "),a("h2",{attrs:{id:"函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数式编程")]),s._v(" "),a("p",[s._v("一个命名函数可以理解为：函数名为一个指向函数方法的变量")]),s._v(" "),a("p",[s._v("函数式编程就是指高度抽象的编程范式")]),s._v(" "),a("h3",{attrs:{id:"高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 高阶函数")]),s._v(" "),a("p",[s._v("一个函数（A）可以接受另一个函数（B）作为传参，则该函数（A）为高阶函数，有点像 JavaScript 中的回调函数")]),s._v(" "),a("p",[s._v("类似 JavaScript，python 内建的 "),a("code",[s._v("map()")]),s._v(", "),a("code",[s._v("reduce()")]),s._v(", "),a("code",[s._v("filter()")]),s._v(" 就是典型的高阶函数，不过需要注意，其返回值是迭代器，所以一般通过 "),a("code",[s._v("list(Interator)")]),s._v(" 将其转换为 list")]),s._v(" "),a("p",[s._v("高阶函数不仅可以接受一个函数作为参数，同时可以将函数作为返回值返回，所以高阶函数可以理解为"),a("strong",[s._v("接受函数作为传参或者返回值的一类函数")])]),s._v(" "),a("p",[s._v("匿名函数关键字为 "),a("code",[s._v("lambda")])]),s._v(" "),a("p",[s._v("匿名函数有个限制，就是只能有一个表达式，不要写 "),a("code",[s._v("return")]),s._v("，返回值就是该表达式的结果")]),s._v(" "),a("h3",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器","aria-hidden":"true"}},[s._v("#")]),s._v(" 装饰器")]),s._v(" "),a("p",[s._v("举个例子：让一双 yeezy 具有防水功能，一个思路是添加各种科技，这可能会使 yeezy 变得不再轻便和耐看，更聪明的办法是套上一层鞋套。此时，yeezy 还是 yeezy，这层鞋套就相当于装饰器，在不改变 yeezy 的情况下，为其添加了防水功能")]),s._v(" "),a("p",[s._v("装饰器可以理解为函数增强的实现，它在不改变原函数的情况下，为其增加功能，不同于java纯面向对象的编程，python 装饰器是基于返回函数实现的，本质上，python 装饰器的返回值也是一个函数对象")]),s._v(" "),a("blockquote",[a("p",[s._v("“在面向对象（OOP）的设计模式中，decorator 被称为装饰模式。OOP 的装饰模式需要继承和组合来实现，但是 python3 除了支持 OOP 的装饰器外，还可以直接从语法上支持（即函数编程）装饰模式”")])]),s._v(" "),a("p",[s._v("decorator 的关键字为 "),a("code",[s._v("@xxx")]),s._v("，"),a("code",[s._v("@")]),s._v(" 是 python3 的语法糖，实际作用就是将函数的引用重新赋值")]),s._v(" "),a("p",[a("code",[s._v("wrapper(**args, **kw)")]),s._v(" 是装饰器函数的标准写法，目的是为了 "),a("code",[s._v("wrapper()")]),s._v(" 函数能够接受任何参数的调用")]),s._v(" "),a("p",[s._v("为了防止依赖函数签名的代码执行出现错误，通常通过 "),a("code",[s._v("@functools.wraps(func)")]),s._v(" 来将原始属性写入新的函数中")]),s._v(" "),a("p",[a("code",[s._v("functools.partial()")]),s._v(" 偏函数，起作用就是更改一个函数的原始默认值，同时返回一个新的函数")])])},[],!1,null,null,null);t.default=n.exports}}]);