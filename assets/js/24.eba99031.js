(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{285:function(t,s,a){"use strict";a.r(s);var n=a(38),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"basic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic","aria-hidden":"true"}},[t._v("#")]),t._v(" Basic")]),t._v(" "),a("blockquote",[a("p",[t._v("Python3 基本知识和使用")])]),t._v(" "),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("p",[t._v("字符串格式化，通常有两种方式：")]),t._v(" "),a("ul",[a("li",[t._v("用 "),a("code",[t._v("%")]),t._v(" 实现格式化\n"),a("ul",[a("li",[t._v("%d 代表整数")]),t._v(" "),a("li",[t._v("%s 代表字符串")]),t._v(" "),a("li",[t._v("%f 代表浮点数")]),t._v(" "),a("li",[t._v("%x 代表16进制整数")]),t._v(" "),a("li",[t._v("%% 代表对 % 的转义")])])]),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("format()")]),t._v(" 实现")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用 `%` 实现格式化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello, %s%d%.2f'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yango'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.6666")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# format 会通过位置映射和关键字映射来找寻元素，通过 {} 来包裹关键字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{server}:{}:{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" server"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'port'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# port:abc:123")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("str()")]),t._v(" 用来实现字符串强制转换")]),t._v(" "),a("h2",{attrs:{id:"list-tuple"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-tuple","aria-hidden":"true"}},[t._v("#")]),t._v(" list && tuple")]),t._v(" "),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list","aria-hidden":"true"}},[t._v("#")]),t._v(" list")]),t._v(" "),a("blockquote",[a("p",[t._v("list 和 tuple 是 python 内置的有序集合，前者可变，后者不可变（可类比 let && const）")])]),t._v(" "),a("p",[t._v("list 是一种有序的集合，可以随时添加或者删除元素，可类比 Array，主要方法：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除最后一个元素或者指定位置元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向 list 中追加元素到末尾")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向 list 指定位置插入元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 list 的长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串数组转字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于非字符串数组，则通过遍历来进行转换")]),t._v("\nstr_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 + 合并两个数组")]),t._v("\nnew_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str_list\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("h3",{attrs:{id:"tuple"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tuple","aria-hidden":"true"}},[t._v("#")]),t._v(" tuple")]),t._v(" "),a("blockquote",[a("p",[t._v("tuple 可以看作是 list 的进化版，它拥有更强的“控制欲”，一旦tuple初始化就不能更改")])]),t._v(" "),a("p",[t._v("需要注意的是：")]),t._v(" "),a("ul",[a("li",[t._v("list 用 "),a("code",[t._v("[]")]),t._v("，而 tuple 用 "),a("code",[t._v("()")])]),t._v(" "),a("li",[t._v("tuple 引用的元素不能变更，但是存在一个“陷阱”，即当其元素仍存在一个新的引用时(即嵌套引用)，可以改变二维的引用值，而不会报错")]),t._v(" "),a("li",[t._v("当tuple初始化时，如果只有一个值，此时python会以小括号来进行解释，所以此时需要添加一个逗号，来消除歧义")])]),t._v(" "),a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),a("p",[t._v("优点：优雅、明确、简单、跨平台")]),t._v(" "),a("p",[t._v("缺点：运行速度慢，因为其是"),a("strong",[t._v("解释型语言")]),t._v("，需要在代码执行时一行一行编译成CPU能够理解的机器码；代码不能加密；")]),t._v(" "),a("p",[t._v("适合领域")]),t._v(" "),a("ul",[a("li",[t._v("Web网站和各种网络服务")]),t._v(" "),a("li",[t._v("系统工具和脚本")]),t._v(" "),a("li",[t._v("作为“胶水”语言将其他语言开发的模块包包装起来方便使用")])]),t._v(" "),a("p",[t._v("不适合领域")]),t._v(" "),a("ul",[a("li",[t._v("贴近硬件的代码（首选为C）")]),t._v(" "),a("li",[t._v("移动开发：IOS/Android")]),t._v(" "),a("li",[t._v("游戏开发")])]),t._v(" "),a("h3",{attrs:{id:"基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),a("p",[t._v("第一个python文件")]),t._v(" "),a("p",[t._v("在.py 文件目录下，通过命令行 "),a("code",[t._v("python test01.py")]),t._v(" 来让python解释器运行当前文件代码")]),t._v(" "),a("p",[t._v("注意不要使用Word和Windows自带的记事本，Word保存的不是纯文本，记事本会添加字符引起编译错误")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 单行注释 `# 注释内容`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print 和 input 来控制输出和输入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print() 遇到 “,” 会输出一个空格")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'why'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'not'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("strong",[t._v("约定用法")])]),t._v(" "),a("ul",[a("li",[t._v("第一行代码目的是告诉 Linux/OS X系统，这是一个python3的可执行程序，window会自动忽略")]),t._v(" "),a("li",[t._v("第二行告诉python解释器，以 utf-8 编码来读取源码")]),t._v(" "),a("li",[t._v("第四行用一个字符串来表示当前模块的注释")]),t._v(" "),a("li",[t._v("第六行通过 "),a("code",[t._v("__author__")]),t._v(" 来声明作者")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env python3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding:utf-8 -*-")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test page'")]),t._v("\n\n__author__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yanGo'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("p",[t._v("五种简单的数据类型")]),t._v(" "),a("ul",[a("li",[t._v("整数 int")]),t._v(" "),a("li",[t._v("浮点数 float")]),t._v(" "),a("li",[t._v("字符串 str")]),t._v(" "),a("li",[t._v("布尔值 bool，注意布尔值的 "),a("code",[t._v("True")]),t._v(" 和 "),a("code",[t._v("False")]),t._v(" 需要大写")]),t._v(" "),a("li",[t._v("空值，用 "),a("code",[t._v("None")]),t._v(" 表示")])]),t._v(" "),a("p",[t._v("对应强制转换方法："),a("code",[t._v("int(), float(), str(), bool()")])]),t._v(" "),a("p",[a("code",[t._v("int()")]),t._v(" 可以将一个字符串形式的数字转换成整数类型，注意字符串类型直接和整数类型比较会报错，"),a("code",[t._v("int()")]),t._v(" 方法发现一个字符串不是合法数字时也会报错")]),t._v(" "),a("p",[t._v("整数和浮点数在计算机内的存储方式不同，整数计算永远是精确的，浮点数可能存在四舍五入的误差")]),t._v(" "),a("p",[a("strong",[t._v("格式化")])]),t._v(" "),a("p",[t._v("用 "),a("code",[t._v("%")]),t._v(" 实现格式化：")]),t._v(" "),a("ul",[a("li",[t._v("%d 代表整数")]),t._v(" "),a("li",[t._v("%s 代表字符串")]),t._v(" "),a("li",[t._v("%f 代表浮点数")]),t._v(" "),a("li",[t._v("%x 代表16进制整数")]),t._v(" "),a("li",[t._v("%% 代表对 % 的转义")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串需要注意对转义字符 `\\`,单行不转义字符 `r'...'` 以及多行不转义字符 `r'''...'''` 的使用")]),t._v("\nmultiline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("r'''\"123\"\n你好\n!'''")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用 `%` 实现格式化")]),t._v("\nstr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello, %s%d%.2f'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yango'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.6666")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# `range(n)` 生成一个[0, ..., n-1] 的整数序列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串大写转小写 `str.lower()`")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HHH"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lower"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值","aria-hidden":"true"}},[t._v("#")]),t._v(" 赋值")]),t._v(" "),a("p",[t._v("python 是动态语言，所以赋值时不需要指定变量类型，甚至不需要像javascript 需要关键字，直接通过 "),a("code",[t._v("=")]),t._v(" 就可以进行赋值")]),t._v(" "),a("p",[t._v("变量在一块内存中，数据在若干块内存中，"),a("strong",[t._v("赋值实际上就是关联变量和数据的过程")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 python 中，全部是大写的变量名表示常量")]),t._v("\nWORD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"encoded"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encoded","aria-hidden":"true"}},[t._v("#")]),t._v(" encoded")]),t._v(" "),a("p",[t._v("产生不同编码方式的原因在于：用来处理各国文字所需的字节数和方式不同")]),t._v(" "),a("p",[t._v("编码演变过程")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("ASCII")]),t._v(" 最早只有127个字母被编码到计算机内，包含大小写英文字母，数字和符号")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Unicode")]),t._v(" 则将所有的语言都统一到一套编码里面")])])]),t._v(" "),a("blockquote",[a("p",[t._v("这两种编码方式的主要区别在于：ACSII编码是一个字节，而Unicode通常是两个字节（如果遇到非常偏僻的字符，则需要四个字节）")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("新的问题又出现了：如果统一成Unicode编码，编码问题是消失了，但是如果文本全是英文的话，会比ASCII多占用近一倍的内存，在存储和传输上十分不划算，由此衍生出“可变长编码”--"),a("code",[t._v("UTF-8")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("UTF-8")]),t._v("将一个Unicode字符根据不同的数字大小编码成1-6个字节")])]),t._v(" "),a("li",[a("p",[t._v("在计算机内存中，统一使用Unicode编码，当需要保存或传输时，则转变成UTF-8编码")])])]),t._v(" "),a("p",[t._v("python3 提供 "),a("code",[t._v("ord()")]),t._v(" 和 "),a("code",[t._v("chr()")]),t._v(" 用来获取字符的编码/转码对应的字符编码")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("ord()")]),t._v(" 仅支持单个字符")])]),t._v(" "),a("p",[a("code",[t._v("len(String)")]),t._v(" 方法用来计算字符的长度")]),t._v(" "),a("p",[a("strong",[t._v("key point")]),t._v(": 当源代码包含中文时，在保存源码时，需要制定其保存为 UTF-8，因此在python解释器读取源码时，为了让它以 UTF-8 编码，通常在文件开头写入以下代码")]),t._v(" "),a("h2",{attrs:{id:"dict-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dict-set","aria-hidden":"true"}},[t._v("#")]),t._v(" dict && set")]),t._v(" "),a("p",[t._v("dict 即 dictionary，是一个map，类似 JavaScript 对象的概念，一个键值对的集合")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("in")]),t._v(" 和 "),a("code",[t._v("get()")]),t._v(" 方法来判断某一属性值是否在指定 dict 中，因为 python 中，如果 dict 中某个key不存在而直接使用的话，会报错")]),t._v(" "),a("p",[a("strong",[t._v("dict中的key必须是不可变对象")])]),t._v(" "),a("p",[a("strong",[t._v("dict中存放顺序和读取顺序无关")])]),t._v(" "),a("p",[t._v("对比list:")]),t._v(" "),a("ul",[a("li",[t._v("dict 是以空间换时间，消耗更多的内存来减少检索时间")])]),t._v(" "),a("p",[t._v("set")]),t._v(" "),a("p",[t._v("要创建一个 set，需要以一个 list 作为输入集合")]),t._v(" "),a("p",[t._v("set 是一组 key 的集合，不存放 value，且存放的key不重复，重复元素会被过滤")]),t._v(" "),a("p",[t._v("set 可以看作数学意义上的无序且不重复的集合，所以可以做交集，并集等运算")]),t._v(" "),a("h3",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[t._v("#")]),t._v(" methods")]),t._v(" "),a("p",[t._v("dict 合并 "),a("code",[t._v("dict1.update(dict2)")]),t._v(": 将 dict2 合并至 dict1 内")]),t._v(" "),a("h2",{attrs:{id:"条件判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件判断","aria-hidden":"true"}},[t._v("#")]),t._v(" 条件判断")]),t._v(" "),a("p",[t._v("在 python 中，通过 "),a("code",[t._v("if:, elif:, else:")]),t._v(" 配合缩进来进行条件判断")]),t._v(" "),a("p",[t._v("注意，if 条件判断的简写，只要 x 为非零数值、非空字符串、非空list等，就判断为 True")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'True'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环","aria-hidden":"true"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),a("p",[t._v("python 中两种循环，一种 "),a("code",[t._v("for item in Array")]),t._v("，一种 "),a("code",[t._v("while")])]),t._v(" "),a("h2",{attrs:{id:"module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module","aria-hidden":"true"}},[t._v("#")]),t._v(" module")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("import ...")]),t._v(" 或者 "),a("code",[t._v("from ... import ...")]),t._v(" 关键字使用模块，通过 "),a("code",[t._v("moduleName.muduleFunction")]),t._v(" 来调用模块内的方法")]),t._v(" "),a("p",[t._v("在模块作用域内，通过 "),a("code",[t._v("_")]),t._v(" 关键字来标识 private 变量或者函数（这是不是说不能访问，而是约定从编程习惯上不要这么做）")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("pip || pip3")]),t._v(" command 来安装模块，pip3 是出于 Mac 中同时存在 python2 和 python3 考虑")]),t._v(" "),a("p",[t._v("当我们引入一个模块时，python 会在指定路径下寻找，默认情况下，python 会搜索当前目录，所有已安装的内置模块以及第三方模块，其路径通过 "),a("code",[t._v("sys.path")]),t._v(" 的 list 来维护")]),t._v(" "),a("h2",{attrs:{id:"对象信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象信息")]),t._v(" "),a("p",[t._v("获取对象引用的类型，属性以及方法")]),t._v(" "),a("h3",{attrs:{id:"对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),a("p",[a("code",[t._v("type()")]),t._v(" 结合 "),a("code",[t._v("types")]),t._v(" 通常用于判断基本类型")]),t._v(" "),a("p",[a("code",[t._v("type()")]),t._v(" 方法返回对象对应的 class 类型")]),t._v(" "),a("p",[t._v("注意，对一个 class，它会返回 "),a("code",[t._v("<class 'type'>")]),t._v("，而对于一个 instance，它会返回 "),a("code",[t._v("<class '__main__.Superman'>")]),t._v(" ，这个表示其父类")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("import types")]),t._v(" 的 types 对象，可以用来判断一个对象是否是函数以及函数的基本信息，比如是基本函数还是生成器等")]),t._v(" "),a("h3",{attrs:{id:"继承关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 继承关系")]),t._v(" "),a("p",[a("code",[t._v("isinstance()")]),t._v(" 通常用于判断 class 的继承关系，它会判断一个对象是否是该类型本身，或者位于该类型的父继承链上")]),t._v(" "),a("p",[t._v("还可以判断，一个变量是否是某些类型中的一种，例如 "),a("code",[t._v("isinstance((1,2,3), (tuple, list))")])]),t._v(" "),a("h3",{attrs:{id:"属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性和方法")]),t._v(" "),a("p",[a("code",[t._v("dir()")]),t._v(" 返回一个 list，包含该对象所有的属性和方法")]),t._v(" "),a("p",[t._v("结合 "),a("code",[t._v("hasattr(obj, key), getattr(obj, key, defaultvalue), setattr(obj, key, value)")]),t._v(" 可以直接操作一个对象的状态")]),t._v(" "),a("p",[t._v("一般能够直接获取对象属性的话，就直接获取，不需要调用 "),a("code",[t._v("setattr()")]),t._v(" 方法")]),t._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://docs.python.org/3/library/functions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("python 内置函数"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("可以在 terminal 内通过 "),a("code",[t._v("help(abs)")]),t._v(" 命令来查看abs方法的用法")]),t._v(" "),a("p",[t._v("函数也可以赋值给一个变量，代表对该方法的引用，相当于给该方法起了一个“别名”")]),t._v(" "),a("h3",{attrs:{id:"define"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#define","aria-hidden":"true"}},[t._v("#")]),t._v(" define")]),t._v(" "),a("p",[a("code",[t._v("def")]),t._v(" 关键字（define function）用来声明一个函数")]),t._v(" "),a("p",[t._v("如果没有 return 语句，函数执行完毕会返回 None，"),a("code",[t._v("return None")]),t._v(" 可简写为 "),a("code",[t._v("return")])]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("pass")]),t._v(" 关键字可以定义一个空函数，让代码先运行")]),t._v(" "),a("p",[t._v("一个好的习惯就是，优先检查参数的数据类型，通过 python内置方法 "),a("code",[t._v("isinstance()")]),t._v(" 实现")]),t._v(" "),a("p",[t._v("可以通过 return 语句返回多个返回值，实际上还是一个tuple，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接受一个tuple，相当于 Javascript 的解构")]),t._v(" "),a("h3",{attrs:{id:"params"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#params","aria-hidden":"true"}},[t._v("#")]),t._v(" params")]),t._v(" "),a("p",[t._v("函数的参数，大致分为：")]),t._v(" "),a("ul",[a("li",[t._v("位置参数，表示调用时，传入的值按照位置顺序依次赋值")]),t._v(" "),a("li",[t._v("默认参数，类似 ES6 为参数设置一个默认值，如果调用函数时，无传参，则用默认值代替")]),t._v(" "),a("li",[t._v("可变参数，关键字为 "),a("code",[t._v("*")]),t._v("，在变量前添加，代表该参数为可变参数，可以传入任意个参数，在函数内部会被处理成 tuple，这样做的好处在于不用在函数调用时组装出一个 tuple 或者 list")]),t._v(" "),a("li",[t._v("关键字参数，关键字为 "),a("code",[t._v("**")]),t._v("，于可变参数类似，不过函数会解析成 dict，需要传入若干个键值对，如果传入一个 dict，则会在函数内部生成一份原 dict 的拷贝")]),t._v(" "),a("li",[t._v("命名关键字参数，需要一个特殊分隔符 "),a("code",[t._v("*")]),t._v("，"),a("code",[t._v("*")]),t._v(" 后面的参数被视为命名的关键字参数，调用时必须传入 key，并且可以为某个属性设置 value")])]),t._v(" "),a("p",[a("strong",[t._v("注意")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("必选参数要放在默认参数前面，可以不按照顺序提供默认参数，此时需要指定 key")])]),t._v(" "),a("li",[a("p",[t._v("默认参数必须指向不变对象，因为 python 函数在定义时，默认参数也是一个变量，并且指向设置的变量对象，每次调用函数时，如果改变了变量的值，实际上改变了变量对象，再次调用时，就不是初始值了，而是上次调用后的值，一般通过设置不变对象 "),a("code",[t._v("None")]),t._v(" 来实现")])]),t._v(" "),a("li",[a("p",[t._v("一个原则：在设置函数参数时，尽可能设计成不变对象")])]),t._v(" "),a("li",[a("p",[t._v("对于可变参数，如果传入的是一个 list 或者 tuple，可以在调用时加上 "),a("code",[t._v("*")]),t._v(" 关键字将其转换成可变参数")])]),t._v(" "),a("li",[a("p",[t._v("可以利用关键字参数来区分必选字段和可选字段这样的用户输入场景")])]),t._v(" "),a("li",[a("p",[t._v("传参可以组合，但是必须遵循顺序：必选参数 > 默认参数 > 可变参数/命名关键字参数 > 关键字参数")])])]),t._v(" "),a("h3",{attrs:{id:"递归函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归函数")]),t._v(" "),a("p",[t._v("递归函数就是在函数内部调用自身")]),t._v(" "),a("p",[t._v("在计算机中，函数调用是通过栈（stack）这种数据结构来实现的，每当函数调用，栈就会增加一层栈桢，每档一个函数返回，栈就会减少一个栈桢")]),t._v(" "),a("p",[t._v("由于栈本身是有大小限制的，所以使用递归函数要注意优化和防止栈溢出")]),t._v(" "),a("p",[t._v("解决递归调用栈溢出的方法就是通过"),a("strong",[t._v("尾递归")]),t._v("，尾递归优化需要编译器或者解释器支持，优化点在于无论递归调多少次，栈桢都只占用一个，尾递归是指：")]),t._v(" "),a("ul",[a("li",[t._v("在函数返回时，调用自身")]),t._v(" "),a("li",[t._v("return 语句不包含表达式")])]),t._v(" "),a("p",[t._v("但是 python 解释器并没有对尾递归进行优化")])])},[],!1,null,null,null);s.default=e.exports}}]);